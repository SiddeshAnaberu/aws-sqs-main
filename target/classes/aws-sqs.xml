<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:s3="http://www.mulesoft.org/schema/mule/s3"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:sqs="http://www.mulesoft.org/schema/mule/sqs" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/sqs http://www.mulesoft.org/schema/mule/sqs/current/mule-sqs.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd">
	<sqs:config name="Amazon_SQS_Configuration" doc:name="Amazon SQS Configuration" doc:id="086d69da-b1a6-40bc-b439-435012f696d2" >
		<sqs:basic-connection accessKey="AKIAUBCLFDUHR3OG7F5E" secretKey="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" />
	</sqs:config>
	<http:request-config name="HTTP_Request_configuration" doc:name="HTTP Request configuration" doc:id="bc8408ad-3317-41ae-b014-251bf16e2ca5" >
		<http:request-connection host="localhost" port="8081" />
	</http:request-config>
	<s3:config name="Amazon_S3_Configuration" doc:name="Amazon S3 Configuration" doc:id="3fab4cc3-31a5-4c21-a726-54e90a8ae529" >
		<s3:basic-connection accessKey="AKIAUBCLFDUH6W63CZ6X" secretKey="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" region="US_EAST_2"/>
	</s3:config>
	<file:config name="File_Config" doc:name="File Config" doc:id="60d0640f-4569-412a-8853-28a354e5cb69" />
	<flow name="aws-s3" doc:id="190a16fb-7d99-4529-9060-359269fd8468" >
		<ee:transform doc:name="base64encoding" doc:id="8dab9fee-c95b-43fc-aba2-00b904e47c50" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
import * from dw::core::Binaries
---
fromBase64(payload)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<set-payload doc:name="image" doc:id="3383bfec-1f00-44a0-b631-3cbdc0e4e162" mimeType="image/jpeg" value="payload"/>
		<file:write doc:name="Write_image" doc:id="0acf5a19-cfc3-4257-8e1f-e3fa6b8b028a" path="C:\Users\siddeshsa\Desktop\idd.jpg" config-ref="File_Config"/>
		<s3:create-object doc:name="Create image in s3" doc:id="3487213e-a939-4f97-90ad-e457c5034417" config-ref="Amazon_S3_Configuration" bucketName="json-data-sample" key="#['MyFile' ++ (now() as String {format:'yyyy-MM-dd-hh-mm-ss'})++ '.jpg']"/>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="328880f7-87b9-4f2b-8eb1-cf24fa68f109" type="S3:ACCESS_DENIED, S3:ACCOUNT_PROBLEM, S3:AMBIGUOUS_GRANT_BY_EMAIL_ADDRESS, S3:BAD_DIGEST, S3:BUCKET_ALREADY_EXISTS, S3:BUCKET_ALREADY_OWNED_BY_YOU, S3:BUCKET_NOT_EMPTY, S3:CONNECTIVITY, S3:CREDENTIALS_NOT_SUPPORTED, S3:CROSS_LOCATION_LOGGING_PROHIBITED, S3:ENTITY_TOO_LARGE, S3:ENTITY_TOO_SMALL, S3:EXPIRED_TOKEN, S3:ILLEGAL_VERSIONING_CONFIGURATION_EXCEPTION, S3:INCOMPLETE_BODY, S3:INCORRECT_NUMBER_OF_FILES_IN_POST_REQUEST, S3:INLINE_DATA_TOO_LARGE, S3:INTERNAL_ERROR, S3:INVALID_ACCESS_KEY_ID, S3:INVALID_ADDRESSING_HEADER, S3:INVALID_ARGUMENT, S3:INVALID_BUCKET_NAME, S3:INVALID_BUCKET_STATE, S3:INVALID_DIGEST, S3:INVALID_ENCRYPTION_ALGORITHM_ERROR, S3:INVALID_LOCATION_CONSTRAINT, S3:INVALID_OBJECT_STATE, S3:INVALID_PART, S3:INVALID_PART_ORDER, S3:INVALID_PAYER, S3:INVALID_POLICY_DOCUMENT, S3:INVALID_RANGE, S3:INVALID_REQUEST, S3:INVALID_RESPONSE_PRESIGNEDURL_MALFORMED, S3:INVALID_SECURITY, S3:INVALID_SOAP_REQUEST, S3:INVALID_STORAGE_CLASS, S3:INVALID_TARGET_BUCKET_FOR_LOGGING, S3:INVALID_TOKEN, S3:INVALID_URI, S3:KEY_TOO_LONG, S3:MALFORMED_ACL_ERROR, S3:MALFORMED_POST_REQUEST, S3:MALFORMED_XML, S3:MAX_MESSAGE_LENGTH_EXCEEDED, S3:MAX_POST_PRE_DATA_LENGTH_EXCEEDED_ERROR, S3:METADATA_TOO_LARGE, S3:METHOD_NOT_ALLOWED, S3:MISSING_ATTACHMENT, S3:MISSING_CONTENT_LENGTH, S3:MISSING_REQUEST_BODY_ERROR, S3:MISSING_SECURITY_ELEMENT, S3:MISSING_SECURITY_HEADER, S3:NOT_IMPLEMENTED, S3:NOT_SIGNED_UP, S3:NO_LOGGING_STATUS_FOR_KEY, S3:NO_SUCH_BUCKET, S3:NO_SUCH_BUCKET_POLICY, S3:NO_SUCH_KEY, S3:NO_SUCH_LIFECYCLE_CONFIGURATION, S3:NO_SUCH_UPLOAD, S3:NO_SUCH_VERSION, S3:OPERATION_ABORTED, S3:PERMANENT_REDIRECT, S3:PRECONDITION_FAILED, S3:REDIRECT, S3:REQUEST_IS_NOT_MULTI_PART_CONTENT, S3:REQUEST_TIMEOUT, S3:REQUEST_TIME_TOO_SKEWED, S3:REQUEST_TORRENT_OF_BUCKET_ERROR, S3:RESTORE_ALREADY_IN_PROGRESS, S3:RETRY_EXHAUSTED, S3:SERVICE_UNAVAILABLE, S3:SIGNATURE_DOES_NOT_MATCH, S3:SLOW_DOWN, S3:TEMPORARY_REDIRECT, S3:TOKEN_REFRESH_REQUIRED, S3:TOO_MANY_BUCKETS, S3:UNEXPECTED_CONTENT, S3:UNKNOWN, S3:UNRESOLVABLE_GRANT_BY_EMAIL_ADDRESS, S3:USER_KEY_MUST_BE_SPECIFIED">
				<ee:transform doc:name="Transform Message" doc:id="2adbbd5a-1d6a-4dd7-982e-f780b6a34f3b" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message": 'S3 error with message : '++ error.description as String
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="66c3c729-be04-45f0-931d-6d4298001f8d" />
			</on-error-propagate>
			<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="a146bc48-daa7-4b8e-bc15-ef5578fefd0f" type="FILE:FILE_ALREADY_EXISTS">
				<ee:transform doc:name="Transform Message" doc:id="129c9b71-51ea-4789-9ba3-d56fcdfa1fc3" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message" : 'File already exists'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<set-variable value="403" doc:name="Set Variable" doc:id="854e2ae3-11cf-4708-9444-b1b0593e46d7" variableName="httpStatus"/>
			</on-error-continue>
		</error-handler>
	</flow>
	<flow name="device_two" doc:id="87a70444-5917-4f77-a389-036f2560a9b4" >
		<logger level="INFO" doc:name="Logger" doc:id="bb65eae6-1f07-4752-832a-4e846245d6dd" message="calling from device 2"/>
		<flow-ref doc:name="Flow Reference" doc:id="711df7c9-ab32-40cc-ab2d-13e04e7e5823" name="aws-sqsFlow"/>
	</flow>
	<flow name="device_one" doc:id="6093be47-74ff-4ea4-a535-248a2e1c91b5" >
		<logger level="INFO" doc:name="Logger" doc:id="f2d5c173-bb62-4329-90a6-a94501030fd3" message="calling from device 1"/>
		<flow-ref doc:name="Flow Reference" doc:id="994d877a-77dd-4cd8-b79c-9be80e0a7f60" name="aws-sqsFlow"/>
	</flow>
	<flow name="aws-sqsFlow" doc:id="98ce9b94-9b59-402f-8bf1-a2dd29809c0f" >
		<ee:transform doc:name="Transform Message to sqs format" doc:id="971592cb-b534-40c5-8216-79e487bbbb23" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	delaySeconds: 0,
	body: payload,
	messageAttributes: {
		"AccountId": {
			"stringValue" : "000123456",
			"dataType" : "String.AccountId"
		} as Object {
			class: "org.mule.extension.sqs.api.model.MessageAttributeValue"
		},
		"NumberId": {
			"stringValue" : "230.000000000000000001",
			"dataType" : "Number"
		} as Object {
			class : "org.mule.extension.sqs.api.model.MessageAttributeValue"
		}
	} as Object {
		class: "java.util.HashMap"
	}
} as Object {
	class: "org.mule.extension.sqs.api.model.Message"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<sqs:send-message doc:name="Send message" doc:id="fd982ae0-9237-4bbf-967d-f206e5b48b9a" config-ref="Amazon_SQS_Configuration" queueUrl="https://sqs.us-east-2.amazonaws.com/277183012111/testSQS"/>
		<sqs:get-approximate-number-of-messages doc:name="Get approximate number of messages" doc:id="8810e483-0970-4919-87b2-3573a08b05c5" config-ref="Amazon_SQS_Configuration" queueUrl="https://sqs.us-east-2.amazonaws.com/277183012111/testSQS" />
		<ee:transform doc:name="json" doc:id="52876eee-f96b-4ada-b499-b335711778a5" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="160188eb-dff7-48ba-a363-0e3a6203004b" message="#[payload]" />
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="38ed0930-1ba4-469f-b4f4-3d48a58fe0a8" type="SQS:ACCESS_DENIED, SQS:CONNECTIVITY, SQS:INTERNAL_FAILURE, SQS:INVALID_CREDENTIALS, SQS:INVALID_DATA, SQS:MESSAGE_SIZE_THRESHOLD_OUT_OF_RANGE, SQS:OPT_IN_REQUIRED, SQS:PARAMETER_OUT_OF_RANGE, SQS:REQUEST_EXPIRED, SQS:RETRY_EXHAUSTED, SQS:S3_BUCKET_ACCESS_DENIED, SQS:S3_BUCKET_NOT_FOUND, SQS:SERVICE_UNAVAILABLE, SQS:THROTTLING_EXCEPTION">
				<ee:transform doc:name="SQS Message" doc:id="5d3f2347-fa7d-4de5-87fd-2f89221c32b6" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message": 'SQS exception with message : '++ error.description as String
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
		<flow name="aws-sqs-reciever" doc:id="42604849-d790-4f18-89cd-5516457568cb" >
		<sqs:receivemessages doc:name="Receive messages" doc:id="ad978c9d-b8bf-44fa-9a23-4ad2bbed4416" config-ref="Amazon_SQS_Configuration" queueUrl="https://sqs.us-east-2.amazonaws.com/277183012111/testSQS"/>
		<ee:transform doc:name="json" doc:id="204ca747-639e-4dc7-8584-31391de8084d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="58c5be33-0783-4e52-bb1e-5fe8ffa1fd78" message="#[%dw 2.0
&#10;output application/json
&#10;---
&#10;{	severity: &quot;LOW&quot;,
&#10;    eventType: &quot;MulesLogs&quot;,
&#10;    env: &quot;DEV&quot;,
&#10;    messageId: uuid() as String,
&#10;    muleAppName: &quot;policy-demo1&quot;,
&#10;    intgCreationDate: now() as String {format: &quot;yyyy-MM-dd'T'HH:mm:ss.ss'Z'&quot;},
&#10;    payload: write(&quot;Message&quot; : payload ,'application/json'),
&#10;    resultMessage: vars.errorMessage default ' ',
&#10;    result: &quot;Success&quot;,
&#10;    action: &quot;Request received&quot;
&#10; }]"/>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="5345bb2f-3b65-433a-a3e9-442efbfdab1c" type="ANY">
				<ee:transform doc:name="Transform Message" doc:id="d74da473-ac2b-44dc-9d9b-8c4f863cc87e" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message" : error.description
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="1db8d331-1616-4e8d-b005-1f6e49bafaa9" message="#[%dw 2.0
&#10;output application/json
&#10;---
&#10;{
&#10;    severity: &quot;Error&quot;,
&#10;    eventType: &quot;MulesLogs&quot;,
&#10;    env: &quot;DEV&quot;,
&#10;    messageId: uuid() as String,
&#10;    muleAppName: &quot;policy-demo1&quot;,
&#10;    intgCreationDate: now() as String {format: &quot;yyyy-MM-dd'T'HH:mm:ss.ss'Z'&quot;},
&#10;    payload: write(error.detailedDescription,'application/json'),
&#10;    resultMessage: error.detailedDescription default ' ',
&#10;    result: &quot;Error&quot;,
&#10;    action: &quot;Error caught&quot;
&#10;}]"/>
			</on-error-propagate>
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="0d7a5a06-2a92-4c98-a444-9be7b53dee6c" type="SQS:ACCESS_DENIED, SQS:CONNECTIVITY, SQS:INTERNAL_FAILURE, SQS:INVALID_CREDENTIALS, SQS:INVALID_DATA, SQS:MESSAGE_SIZE_THRESHOLD_OUT_OF_RANGE, SQS:OPT_IN_REQUIRED, SQS:PARAMETER_OUT_OF_RANGE, SQS:REQUEST_EXPIRED, SQS:RETRY_EXHAUSTED, SQS:S3_BUCKET_ACCESS_DENIED, SQS:S3_BUCKET_NOT_FOUND, SQS:SERVICE_UNAVAILABLE, SQS:THROTTLING_EXCEPTION" >
				<ee:transform doc:name="SQS Message" doc:id="66e3e730-49f3-4df5-928c-d986a965704b" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message": 'SQS exception with message : '++ error.description as String
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
	<flow name="aws-sqsFlow1" doc:id="3b7cb8e0-fb62-480c-a5a8-068c99f3a9d2" >
		<sqs:receivemessages doc:name="Receive messages" doc:id="2c327fac-3be9-406c-95cc-c8da06277d2a" config-ref="Amazon_SQS_Configuration" queueUrl="https://sqs.us-east-2.amazonaws.com/277183012111/testSQS"/>
		<ee:transform doc:name="Transform Message" doc:id="7d2d4864-7df4-46af-8362-4ac3751da995" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="9b331b90-f847-4987-9cfc-515cd6cd7af1" message='#[payload as String ++ "secondreciver"]'/>
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="b946fa93-82ba-44c1-9422-9cdd6b3fd679" type="ANY">
				<ee:transform doc:name="Transform Message" doc:id="dd8ca690-dfe6-457b-927f-82bc42fc1523" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message" : error.description
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="dbad0cb3-d111-4fdc-a5ef-63b791eb8b3e" message="#[%dw 2.0&#10;&#10;output application/json&#10;&#10;---&#10;&#10;{&#10;&#10;    severity: &quot;Error&quot;,&#10;&#10;    eventType: &quot;MulesLogs&quot;,&#10;&#10;    env: &quot;DEV&quot;,&#10;&#10;    messageId: uuid() as String,&#10;&#10;    muleAppName: &quot;policy-demo1&quot;,&#10;&#10;    intgCreationDate: now() as String {format: &quot;yyyy-MM-dd'T'HH:mm:ss.ss'Z'&quot;},&#10;&#10;    payload: write(error.detailedDescription,'application/json'),&#10;&#10;    resultMessage: error.detailedDescription default ' ',&#10;&#10;    result: &quot;Error&quot;,&#10;&#10;    action: &quot;Error caught&quot;&#10;&#10;}]" />
			</on-error-propagate>
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="0fed13c5-e445-46ae-92ff-851a57adb16c" type="SQS:ACCESS_DENIED, SQS:CONNECTIVITY, SQS:INTERNAL_FAILURE, SQS:INVALID_CREDENTIALS, SQS:INVALID_DATA, SQS:MESSAGE_SIZE_THRESHOLD_OUT_OF_RANGE, SQS:OPT_IN_REQUIRED, SQS:PARAMETER_OUT_OF_RANGE, SQS:REQUEST_EXPIRED, SQS:RETRY_EXHAUSTED, SQS:S3_BUCKET_ACCESS_DENIED, SQS:S3_BUCKET_NOT_FOUND, SQS:SERVICE_UNAVAILABLE, SQS:THROTTLING_EXCEPTION" >
				<ee:transform doc:name="SQS Message" doc:id="b92022c2-eafd-4cab-a6fb-9e73ebc2cccb" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message": 'SQS exception with message : '++ error.description as String
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
	
	<flow name="use-caseFlow" doc:id="c2eac04b-df01-43b5-b31c-a855a2177197" >
		<set-variable value='#[attributes.uriParams."operator"]' doc:name="Set Variable" doc:id="83721422-08f0-4d5c-842a-1f1257b0e999" variableName="operator"/>
		<ee:transform doc:name="Transform Message" doc:id="4ed5fbe7-9d38-4113-a481-7707f5197784" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	(sum : payload.num1 + payload.num2) if (vars.operator == "sum" or vars.operator == "all"),
	(difference:  payload.num1 - payload.num2) if (vars.operator == "difference" or vars.operator == "all"),
	(product: payload.num1 * payload.num2) if (vars.operator == "product" or vars.operator == "all"),
	(divide: payload.num1 / payload.num2) if (vars.operator == "divide" or vars.operator == "all")
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<set-payload value="#[payload]" doc:name="Set Payload" doc:id="08fcf5cf-4a95-43f8-b584-31cca08197a5" />
		<logger level="INFO" doc:name="Logger" doc:id="060ace14-ecd8-4be3-882b-f19a7c744edb" message="#[%dw 2.0
&#10;output application/json
&#10;---
&#10;
&#10;{
&#10;    severity: &quot;LOW&quot;,
&#10;    eventType: &quot;MulesLogs&quot;,
&#10;    env: &quot;DEV&quot;,
&#10;    messageId: uuid() as String,
&#10;    muleAppName: &quot;policy-demo1&quot;,
&#10;    intgCreationDate: now() as String {format: &quot;yyyy-MM-dd'T'HH:mm:ss.ss'Z'&quot;},
&#10;    payload: write(payload,'application/json'),
&#10;    resultMessage: vars.errorMessage default ' ',
&#10;    result: &quot;Success&quot;,
&#10;    action: &quot;Request received&quot;
&#10; }]"/>
		<error-handler >
			<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="ba4743ab-fa63-4f26-8c4b-40743b6ed44a" type="EXPRESSION">
				<ee:transform doc:name="Transform Message" doc:id="ed577dde-3b0f-49a9-ba53-2ffd1106fb4a" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message": 'error when transforming dataweave expression'
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="4a871952-a140-4b51-b0f4-2dc410b246cf" message="#[%dw 2.0
&#10;output application/json
&#10;---
&#10;{
&#10;    severity: &quot;Error&quot;,
&#10;    eventType: &quot;MulesLogs&quot;,
&#10;    env: &quot;DEV&quot;,
&#10;    messageId: uuid() as String,
&#10;    muleAppName: &quot;policy-demo1&quot;,
&#10;    intgCreationDate: now() as String {format: &quot;yyyy-MM-dd'T'HH:mm:ss.ss'Z'&quot;},
&#10;    payload: write(error.detailedDescription,'application/json'),
&#10;    resultMessage: error.detailedDescription default ' ',
&#10;    result: &quot;Error&quot;,
&#10;    action: &quot;Error caught&quot;
&#10;}]"/>
			</on-error-continue>
		</error-handler>
	</flow>
</mule>
